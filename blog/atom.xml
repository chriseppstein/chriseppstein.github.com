<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>#chris-eppstein {position: unique;}</title>
  <link href="http://chriseppstein.github.com/atom.xml" rel="self" />
  <link href="http://chriseppstein.github.com/" />
  <updated>2010-08-01T17:24:10-07:00</updated>
  <id>http://chriseppstein.github.com/</id>
  <author>
    <name>Chris Eppstein</name>
    <email>chris[at]eppsteins[dawt]net</email>
  </author>
  <entry>
    <title>Building a Personal CSS Framework with Compass</title>
    <link href="http://chriseppstein.github.com/blog/2010/08/01/building-a-personal-framework" />
    <updated>2010-08-01T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/08/01/building-a-personal-framework</id>
    <content type="html">
      Building a personal CSS framework using Compass is super easy and provides huge productivity gains for CSS developers.
    </content>
  </entry>
  <entry>
    <title>Refactor My Stylesheets: The Negative Value Mixin</title>
    <link href="http://chriseppstein.github.com/blog/2010/07/15/refactor-my-stylesheets-the-negative-value-mixin" />
    <updated>2010-07-15T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/07/15/refactor-my-stylesheets-the-negative-value-mixin</id>
    <content type="html">
      Sometimes a mixin adds negative value to your stylesheet.
    </content>
  </entry>
  <entry>
    <title>SF Bay Area Sass Meetup: June 29, 2010</title>
    <link href="http://chriseppstein.github.com/blog/2010/06/19/1st-compass-sass-meetup" />
    <updated>2010-06-19T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/06/19/1st-compass-sass-meetup</id>
    <content type="html">
      Nathan is in town so we're having a meetup on June 29, 2010 in Mountain View, CA.
    </content>
  </entry>
  <entry>
    <title>Working with Nested Application Bundles</title>
    <link href="http://chriseppstein.github.com/blog/2010/05/28/nested-bundles" />
    <updated>2010-05-28T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/05/28/nested-bundles</id>
    <content type="html">
      Ruby's Gem Bundler doesn't like it when you try to nest bundles. Here's a work-around.
    </content>
  </entry>
  <entry>
    <title>Refactor My Stylesheets: The Digg.com Edition</title>
    <link href="http://chriseppstein.github.com/blog/2010/05/25/refactor-my-stylesheets-digg-edition" />
    <updated>2010-05-25T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/05/25/refactor-my-stylesheets-digg-edition</id>
    <content type="html">
      See how I clean up a portion of Digg's CSS using Sass.
    </content>
  </entry>
  <entry>
    <title>Where are your Images?</title>
    <link href="http://chriseppstein.github.com/blog/2010/05/17/where-are-your-images" />
    <updated>2010-05-17T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/05/17/where-are-your-images</id>
    <content type="html">
      If you think you know where your images are -- think again.
    </content>
  </entry>
  <entry>
    <title>Compass 1.0 Roadmap</title>
    <link href="http://chriseppstein.github.com/blog/2010/05/14/compass-roadmap" />
    <updated>2010-05-14T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/05/14/compass-roadmap</id>
    <content type="html">
      How we're going to get to v1.0
    </content>
  </entry>
  <entry>
    <title>Compass v0.10 Released</title>
    <link href="http://chriseppstein.github.com/blog/2010/05/10/announcing-the-v0.10-release" />
    <updated>2010-05-10T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/05/10/announcing-the-v0.10-release</id>
    <content type="html">
      Compass v0.10 is released, read on to find out what's new!
    </content>
  </entry>
  <entry>
    <title>Introducing the Compass Core Team</title>
    <link href="http://chriseppstein.github.com/blog/2010/04/11/compass-core-team" />
    <updated>2010-04-11T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/04/11/compass-core-team</id>
    <content type="html">
      Eric Meyer and Brandon Mathis are joining the Compass Core Team.
    </content>
  </entry>
  <entry>
    <title>Haml Sucks for Content</title>
    <link href="http://chriseppstein.github.com/blog/2010/02/08/haml-sucks-for-content" />
    <updated>2010-02-08T00:00:00-08:00</updated>
    <id>http://chriseppstein.github.com/blog/2010/02/08/haml-sucks-for-content</id>
    <content type="html">
      Haml is awesome, but if you're using it for inline markup, you're doing it wrong.
    </content>
  </entry>
  <entry>
    <title>2009 - In Review</title>
    <link href="http://chriseppstein.github.com/blog/2009/12/08/the-year-in-review" />
    <updated>2009-12-08T00:00:00-08:00</updated>
    <id>http://chriseppstein.github.com/blog/2009/12/08/the-year-in-review</id>
    <content type="html">
      A short post looking back at the past year in my life.
    </content>
  </entry>
  <entry>
    <title>We Can Have Hack Free CSS With the @unsupported Directive</title>
    <link href="http://chriseppstein.github.com/blog/2009/10/19/css-unsupported-directive" />
    <updated>2009-10-19T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2009/10/19/css-unsupported-directive</id>
    <content type="html">
      Stylesheets can be hack free with a little help from the W3C. The @supported and @unsupported directives would allow conditional evaluation of CSS based on feature inspection.
    </content>
  </entry>
  <entry>
    <title>CSS Class Inheritance: Abstracting Selectors</title>
    <link href="http://chriseppstein.github.com/blog/2009/10/12/css-class-inheritance" />
    <updated>2009-10-12T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2009/10/12/css-class-inheritance</id>
    <content type="html">
      CSS class inheritance is a powerful concept. It allows selectors to inherit implementation. Read on for information on what it is, how it would work, what the present state is, and what future might hold.
    </content>
  </entry>
  <entry>
    <title>What is Compass</title>
    <link href="http://chriseppstein.github.com/blog/2009/09/30/what-is-compass" />
    <updated>2009-09-30T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2009/09/30/what-is-compass</id>
    <content type="html">
      <p>An astute person asked me yesterday:</p>&#x000A;&#x000A;<blockquote><p>It seems the only thing compass is is a repackaging of existing CSS frameworks like Blueprint into SASS mixins.&#x000A;Is that accurate?  Just trying to understand where Sass ends and Compass begins&#8230;</p></blockquote>&#x000A;&#x000A;<p>The short answer is: Yes. That, and some original Sass mixins. Oh and all the parts needed to make that possible.</p>&#x000A;&#x000A;<h2>Sass is the Star</h2>&#x000A;&#x000A;<p>Make no mistake, Sass is Awesome. I&#8217;m a fanboy. <a href="http://nex-3.com">Nathan Weizenbaum</a> has been an awesome maintainer of Sass and doesn&#8217;t get enough recognition for his work. I started using Sass just after it hit 2.0. Compass has pushed the limits of Sass and many of the language features of 2.2 were driven by Compass &#8211; the two have co-evolved into a powerful platform.</p>&#x000A;&#x000A;<h2>Compass is a Stylesheet Distribution Framework</h2>&#x000A;&#x000A;<p>Compass was initially a port of blueprint to Sass. But as I built it, it became apparent to me that the toolset I was building to distribute the blueprint source was orthogonal to the stylesheets. So Compass was born as a Meta-Framework (A framework for building and distributing css frameworks). With the ultimate goal of enabling anyone who wanted to share Sass stylesheets with others to do so without having to build any infrastructure.</p>&#x000A;&#x000A;<h2>Compass is Project Aware</h2>&#x000A;&#x000A;<p>Sass has it&#8217;s own compiler, but it operates on a single Sass file and generates a single CSS file. Compass understands that you have a complete website and provides a compiler for a whole directory tree of Sass files.</p>&#x000A;&#x000A;<p>But distributing a design, is more than just distributing some stylesheets. There&#8217;s likely some images. But how can you build distributable, upgradable stylesheets if those stylesheets need to refer to an image? Well, you could provide a mixin that takes an argument, or you could allow a variable to be set that says where it is. Or, you can use the <code>image_url</code> function provided by Compass that knows how to write a url, relative to your images path when serving over a webserver or <strong>relative to the generated stylesheet</strong> itself.</p>&#x000A;&#x000A;<h2>Compass enables Open Source Design</h2>&#x000A;&#x000A;<p>With a compass extension you can build a completed design, widget, toolset, etc. and distribute it to projects of different types (rails, php, java, etc) and when a bug is discovered, fix it and enable your users to upgrade without hassle or worry.</p>&#x000A;&#x000A;<h2>Compass Has Core Mixins</h2>&#x000A;&#x000A;<p>A mixin qualifies for &#8220;Core&#8221; status when it is generally useful to most projects and other frameworks. The core framework eliminates duplication and inconsistency between compass extensions.</p>&#x000A;&#x000A;<h2>The Next Version</h2>&#x000A;&#x000A;<p>The next major release of compass will provide tools to make building, distributing, discovering, and installing compass extensions a breeze. I&#8217;ve been working on it for a couple months now and it is really shaping up nicely. The command line tool will integrate with a plugin registry on the compass website to make it easy to find and install compass extensions.</p>&#x000A;&#x000A;<h2>Can you help?</h2>&#x000A;&#x000A;<p>Compass is a big project and there&#8217;s plenty of room for designers and coders alike to help out with Compass development and extension creation. If you&#8217;re sitting on some design that you&#8217;re proud of, it&#8217;s time to share it. If you want to contribute in any way (even testing new versions) join the <a href="http://groups.google.com/group/compass-devs">compass-devs</a> mailing list.</p>
    </content>
  </entry>
  <entry>
    <title>Separating Style Concerns</title>
    <link href="http://chriseppstein.github.com/blog/2009/09/25/separating-style-concerns" />
    <updated>2009-09-25T00:00:00-07:00</updated>
    <id>http://chriseppstein.github.com/blog/2009/09/25/separating-style-concerns</id>
    <content type="html">
      <p>As with any creative work, sometimes, you just have to shoot some aspect of a design and do it over. As such, your goal should be to keep distinct aspects of your design isolated enough from each other that you&#8217;re not afraid to wipe out something that&#8217;s not working. In this post I&#8217;ll share some basic CSS and Sass strategies I use to help me separate different concerns. It&#8217;s important to note that while I&#8217;ll be using Sass to demonstrate my points, many of the strategies outlined here are applicable for users of CSS, <a href="http://lesscss.org">Less</a>, <a href="http://github.com/anthonyshort/csscaffold">CSScafold</a>, and other CSS meta-languages.</p>&#x000A;&#x000A;<h2>Benefits</h2>&#x000A;&#x000A;<p>Here are a few of the scenarios that will be made much simpler if you have followed this best practice:</p>&#x000A;&#x000A;<ul>&#x000A;<li>Theming</li>&#x000A;<li>A/B testing the impacts of design</li>&#x000A;<li>Experimenting with new designs</li>&#x000A;<li>Addressing accessibility (high contrast, larger fonts, etc.)</li>&#x000A;<li>Providing alternate stylesheets</li>&#x000A;<li>Removing features</li>&#x000A;</ul>&#x000A;&#x000A;&#x000A;<h2>Costs</h2>&#x000A;&#x000A;<p>In the short term it&#8217;s going to be cheaper and easier to have your styles all mixed up. Especially if you&#8217;re designing in code, it&#8217;s not at all feasible to start out with separation. Also, it&#8217;s easier to assume a certain <code>font-size</code> when cutting background images than it is to imagine how to handle many font sizes. It&#8217;s OK. This is a long term strategy, after you get the page built, you can refactor the styles &#8211; maybe even after you launch the site.</p>&#x000A;&#x000A;<h2>General Strategy</h2>&#x000A;&#x000A;<p>The style properties of CSS fall into three major categories: Layout, Design, and Typography. We will use these groupings in conjunction with the site&#8217;s natural divisions to create a clean separation of cross-cutting concerns as well as vertical (product feature) concerns.</p>&#x000A;&#x000A;<h2>Layout Properties</h2>&#x000A;&#x000A;<p>Separating out layout properties is absolutely the biggest win to be had with this strategy:</p>&#x000A;&#x000A;<ol>&#x000A;<li>Layout changes much less frequently than the design. Having your layout separated, allows you to easily chuck your design and start again.</li>&#x000A;<li>Your site will probably have a number of distinct layouts and those layouts will likely have some common aspects between them like headers, footers, overall widths. Common aspects are coupled and having them centralized, makes it easier to keep them in sync.</li>&#x000A;<li>Second, changes to an individual layout are coupled. If you add to your sidebar, you probably have to subtract from your main content body. It&#8217;s very nice to be able to quickly and easily locate and change the layout related properties.</li>&#x000A;<li>Coupled with layout mixins from a grid framework like Blueprint, it is very easy to visualize the layout in your head by just reading the styles.</li>&#x000A;</ol>&#x000A;&#x000A;&#x000A;<p>Layout properties are those which affect the location of content on the page:</p>&#x000A;&#x000A;<ul>&#x000A;<li><code>display</code></li>&#x000A;<li><code>position</code>, <code>left</code>, <code>top</code>, <code>bottom</code>, <code>right</code></li>&#x000A;<li><code>float</code> &amp; <code>clear</code></li>&#x000A;<li><code>width</code> &amp; <code>height</code></li>&#x000A;<li><code>margin</code></li>&#x000A;<li><code>border-width</code>, <code>padding</code></li>&#x000A;</ul>&#x000A;&#x000A;&#x000A;<p>It&#8217;s unfortunate that I have to include border width and padding in this list, because I really think that these should be aspects of design, but the reality is that unless you have the luxury of relying on CSS3&#8217;s <code>box-sizing</code> property, keeping borders and paddings separated requires you to nest elements in your content. If you have done this (or plan to), then you are in good shape in this respect.</p>&#x000A;&#x000A;<div class="code-wrapper">&#x000A;<table id="three-column-layouts" class="comparison side-by-side">&#x000A;<caption>A Three Column Layout Free of any design or typography</caption>&#x000A;<tr>&#x000A;<th class="window-title">Sass</th>&#x000A;<th class="gap">&nbsp;</th>&#x000A;<th class="window-title">Handcrafted CSS</th>&#x000A;</tr>&#x000A;<tr>&#x000A;<td valign="top" class="window editor">&#x000A;<div>&#x000A;<div class="highlight"><pre><span class="nt">body</span><span class="nc">.three-column</span>&#x000A;  <span class="nn">#header-wrapper</span><span class="o">,</span> <span class="nn">#footer-wrapper</span><span class="o">,</span> <span class="nn">#page-wrapper</span>&#x000A;    <span class="nd">+container</span>&#x000A;  <span class="nn">#header</span><span class="o">,</span> <span class="nn">#footer</span><span class="o">,</span> <span class="nn">#page</span>&#x000A;    <span class="nd">+column</span><span class="o">(</span><span class="mi">24</span><span class="o">)</span>&#x000A;  <span class="nn">#page</span>&#x000A;    <span class="nn">#left-sidebar</span>&#x000A;      <span class="nd">+column</span><span class="o">(</span><span class="mi">4</span><span class="o">)</span>&#x000A;    <span class="nn">#content</span>&#x000A;      <span class="nd">+column</span><span class="o">(</span><span class="mi">12</span><span class="o">)</span>&#x000A;    <span class="nn">#right-sidebar</span>&#x000A;      <span class="nd">+column</span><span class="o">(</span><span class="mi">8</span><span class="o">)</span>&#x000A;      <span class="nd">+last</span>&#x000A;</pre>&#x000A;</div>&#x000A;&#x000A;&#x000A;<p></div>&#x000A;</td>&#x000A;<td class="gap">&nbsp;</td>&#x000A;<td valign="top" class="window editor">&#x000A;<div>&#x000A;<div class="highlight"><pre><span class="c">/<em> Containers </em>/</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#header-wrapper</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#footer-wrapper</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page-wrapper</span> <span class="p">{</span>&#x000A;  <span class="k">width</span><span class="o">:</span> <span class="m">950px</span><span class="p">;</span>&#x000A;  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="k">auto</span><span class="p">;</span>&#x000A;  <span class="k">overflow</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span> <span class="p">}</span></p>&#x000A;&#x000A;<p><span class="c">/<em> Columns </em>/</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#header</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#footer</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#left-sidebar</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#content</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#right-sidebar</span> <span class="p">{</span>&#x000A;  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="p">;</span>&#x000A;  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>&#x000A;  <span class="k">margin-right</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span> <span class="p">}</span></p>&#x000A;&#x000A;<p><span class="c">/<em> Column Widths </em>/</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#header</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#footer</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="p">{</span>&#x000A;  <span class="k">width</span><span class="o">:</span> <span class="m">950px</span><span class="p">;</span> <span class="p">}</span></p>&#x000A;&#x000A;<p><span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#left-sidebar</span> <span class="p">{</span>&#x000A;  <span class="k">width</span><span class="o">:</span> <span class="m">150px</span><span class="p">;</span> <span class="p">}</span></p>&#x000A;&#x000A;<p><span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#content</span> <span class="p">{</span>&#x000A;  <span class="k">width</span><span class="o">:</span> <span class="m">470px</span><span class="p">;</span> <span class="p">}</span></p>&#x000A;&#x000A;<p><span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#right-sidebar</span> <span class="p">{</span>&#x000A;  <span class="k">width</span><span class="o">:</span> <span class="m">310px</span><span class="p">;</span>&#x000A;  <span class="k">margin-right</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span></p>&#x000A;&#x000A;<p><span class="c">/<em> Fixes for IE </em>/</span>&#x000A;<span class="o"><em></span> <span class="nt">html</span> <span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#header</span><span class="o">,</span>&#x000A;<span class="o"></em></span> <span class="nt">html</span> <span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#footer</span><span class="o">,</span>&#x000A;<span class="o"><em></span> <span class="nt">html</span> <span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span><span class="o">,</span>&#x000A;<span class="o"></em></span> <span class="nt">html</span> <span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#left-sidebar</span><span class="o">,</span>&#x000A;<span class="o"><em></span> <span class="nt">html</span> <span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#content</span><span class="o">,</span>&#x000A;<span class="o"></em></span> <span class="nt">html</span> <span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page</span> <span class="nf">#right-sidebar</span> <span class="p">{</span>&#x000A;  <span class="k">overflow-x</span><span class="o">:</span> <span class="k">hidden</span><span class="p">;</span> <span class="p">}</span></p>&#x000A;&#x000A;<p><span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#header-wrapper</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#footer-wrapper</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page-wrapper</span> <span class="p">{</span>&#x000A;  <span class="c">/<em> We need the containers to have &quot;layout&quot; </em>/</span>&#x000A;  <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span> <span class="p">}</span></p>&#x000A;&#x000A;<p><span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#header-wrapper</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#footer-wrapper</span><span class="o">,</span>&#x000A;<span class="nt">body</span><span class="nc">.three-column</span> <span class="nf">#page-wrapper</span> <span class="p">{</span>&#x000A;  <span class="c">/<em> but we didn&#39;t really want inline-block </em>/</span>&#x000A;  <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span> <span class="p">}</span>&#x000A;</pre>&#x000A;</div>&#x000A;</div>&#x000A;</td>&#x000A;</tr>&#x000A;</table>&#x000A;</div></p>&#x000A;&#x000A;<h2>Typography Properties</h2>&#x000A;&#x000A;<p>Most sites have at least two of types of typography: Chrome and content &#8211; maybe more depending on your needs (for instance this blog has a lot of &#8220;code&#8221; typography). Many designers feel that typography and design are inextricably linked, so a strong separation between the two may not work for everyone. Nevertheless, since they are distinct concepts, I would encourage you to try separating them for the most part.</p>&#x000A;&#x000A;<p>Typographic properties are those which affect the flow and look of text:</p>&#x000A;&#x000A;<ul>&#x000A;<li><code>@font-face</code></li>&#x000A;<li><code>font-family</code></li>&#x000A;<li><code>font-size</code></li>&#x000A;<li><code>font-weight</code></li>&#x000A;<li><code>font-style</code></li>&#x000A;<li><code>line-height</code></li>&#x000A;<li><code>letter-spacing</code></li>&#x000A;<li><code>text-transform</code></li>&#x000A;<li><code>text-decoration</code></li>&#x000A;</ul>&#x000A;&#x000A;&#x000A;<p>This is not to say that every instance of these properties is automatically a typographic concern. Usually they will be. Also, I&#8217;ve left out some of the more &#8220;fancy&#8221; properties like <code>text-shadow</code> because I think they are usually more about design. But the main reason why the use of a particular property makes it typography or design is because you think it is. Don&#8217;t worry, if you&#8217;re thinking about it wrong, that will become clear eventually and when it does, you can refactor it.</p>&#x000A;&#x000A;<h2>Design Properties</h2>&#x000A;&#x000A;<p>Just about everything else is design. The previous two sections will only account for 10%-20% of you total stylesheet contents. So a well organized project will have a lot more structure to it than just the three main categories of style properties.</p>&#x000A;&#x000A;<h2>How to Refactor Your File Structure</h2>&#x000A;&#x000A;<p>Once you get a feature built to your satisfaction, you can begin to refactor it by organizing your file into three sections. Copy and paste the whole set of styles for the feature and delete all the style properties leaving only the selectors. Copy those selectors and paste them twice and comment your three sets of selectors layout, typography, and design. Then move the styles from the original location to the appropriate section. Until you&#8217;ve sorted all your styles. Lastly delete an unused selectors. If each of those sections fits onto a screen without scrolling, you can probably stop here. If the sections are still quite long, you might consider whether there are actually two or three distinct features that could be separated. For instance, a sass file for the site chrome might need to be broken up by header, footer, sidebar, etc. </p>&#x000A;&#x000A;<h2>Project Structure</h2>&#x000A;&#x000A;<p>Since Sass will assemble completed stylesheets for consumption by the browser using the <code>@import</code> directive, we can use files to organize our stylesheets without any performance penalty in production. I like to organize my stylesheets according to the following structure. Note: files starting with an underscore are called &#8220;partials&#8221; and are not compiled to a css file, but are instead meant to be imported into other stylesheets. Once a stylesheet gets long enough to be cumbersome (that is, scrolling is more disorienting than switching files), I create a folder of the same name and I split up the stylesheet into partials within that folder and then import them.</p>&#x000A;&#x000A;<pre><code>stylesheets/&#x000A;  _library.sass&#x000A;  library/&#x000A;    _utilities.sass&#x000A;    _some_other_mixins.sass&#x000A;  application.sass&#x000A;  application/&#x000A;    _common.sass&#x000A;    common/&#x000A;      _header.sass&#x000A;      _footer.sass&#x000A;      _sidebar.sass&#x000A;      _typography.sass&#x000A;      _layouts.sass&#x000A;      layouts/&#x000A;        _two_column.sass&#x000A;        _three_column.sass&#x000A;        _full_width.sass&#x000A;    _feature_1.sass&#x000A;    feature_1/&#x000A;      _design.sass&#x000A;      _structure.sass&#x000A;    _feature_2.sass&#x000A;    feature_2/&#x000A;      _design.sass&#x000A;      _structure.sass&#x000A;</code></pre>&#x000A;&#x000A;<h2>Project Library</h2>&#x000A;&#x000A;<p>Your project library is where you keep mixins and shared variable definitions. These files must never emit any styles, so that they can be included into your other files by simply importing the main library file.</p>&#x000A;&#x000A;<h2>Structuring Mixins</h2>&#x000A;&#x000A;<p>If you&#8217;re building a mixin of any complexity, it&#8217;s good to think about breaking it up into composable parts along these same lines. This allows a consumer of a mixin to peel back one layer of abstraction at a time and pick up the aspects of the mixin they want to use. It&#8217;s much easier to never have applied some set of styles than it is to override them. Of course, this only applies to mixins that provide a finished design.</p>&#x000A;&#x000A;<div class="code-wrapper">&#x000A;<table class="comparison side-by-side">&#x000A;  <tr>&#x000A;    <th class="window-title">stylesheets/library/_badges.sass</th>&#x000A;  </tr>&#x000A;  <tr>&#x000A;    <td valign="top" class="window editor">&#x000A;<div class="highlight"><pre><span class="nf">=user-badge</span>&#x000A;  <span class="nd">+user-badge-layout</span>&#x000A;  <span class="nd">+user-badge-typography</span>&#x000A;  <span class="nd">+user-badge-design</span>&#x000A;&#x000A;<span class="nf">=moderator-badge</span>&#x000A;  <span class="nd">+user-badge-layout</span>&#x000A;  <span class="nd">+user-badge-typography</span>&#x000A;  <span class="nd">+moderator-badge-design</span>&#x000A;</pre>&#x000A;</div>&#x000A;&#x000A;&#x000A;<pre><code>&lt;/td&gt;&#x000A;</code></pre>&#x000A;&#x000A;<p>  </tr>&#x000A;</table>&#x000A;</div></p>&#x000A;&#x000A;<h2>Conclusion</h2>&#x000A;&#x000A;<p>Of course, this is not the only approach, this blog follows a slightly different approach because I want to build some features around alternate themes &#8211; so I have a top level separation of layout, typography and design that then breaks out into a finer structure. All the sass stylesheets for this blog can be browsed, so please <a href="http://chriseppstein.github.com/highlighted/stylesheets/screen.sass.html">check them out</a>. The most important consideration of how to structure a project is your knowledge of how things will change. Of course, you cannot predict the future and so there&#8217;s a good chance you&#8217;ll be wrong. When you realize you are, reorganize in a way that helps you manage change. </p>
    </content>
  </entry>
</feed>
